%prefix "mse"
%value "mse_parser_status_t *"
%auxil "mse_parser_status_t *"

%header{
#include <stdlib.h>
#include <string.h>
#include "mse/interpretor.h"
#include "mse/query_parser.h"
#include "mse_query_parser.h"
}

%source{
#include "testing_h/testing.h"
#undef lprintf
#define lprintf fprintf(LOG_STREAM, "(" ANSI_YELLOW "%s" ANSI_RESET \
                        ":" ANSI_YELLOW "%d" ANSI_RESET ") \t", __FILE__, __LINE__ ),\
                        __lprintf
#define PARSE_ASSERT(result, x) if (!(x)) \
{ \
  lprintf(LOG_ERROR, "Parse Error: Assertion failure, line " \
      ANSI_RED "%d" ANSI_RESET " in " ANSI_RED "%s" ANSI_RESET "\n", \
      __LINE__, ___FNANE); \
  PCC_ERROR(result); \
}

#define PCC_ERROR(auxil) mse_pcc_error(auxil)

#define PCC_GETCHAR(auxil) mse_get_char(auxil)

#define COPY_TO_TMP_BUFFER(result, token_str) \
    if (result->tmp_buffer != NULL) free(result->tmp_buffer); \
    result->tmp_buffer = (char*) malloc(sizeof(char) * (strlen(token_str) + 1)); \
    PARSE_ASSERT(result, result->tmp_buffer != NULL); \
    strcpy(result->tmp_buffer, token_str); \

#define COPY_TO_ARG_BUFFER(result) \
    PARSE_ASSERT(result, result->tmp_buffer != NULL) \
    PARSE_ASSERT(result, result->argument_buffer = result->tmp_buffer); \
    result->tmp_buffer = NULL;

static void mse_pcc_error(mse_parser_status_t *res) {
    res->error = 1;
    lprintf(LOG_ERROR, "Parse error\n");
}

static int mse_get_char(mse_parser_status_t *res) {
  if (res->input_buffer_ptr >= res->input_buffer_len) {
    return EOF;
  }

  return res->input_buffer[res->input_buffer_ptr++];
}
}

statement <- query
          / WHITESPACE query 
          / query WHITESPACE
          / WHITESPACE query WHITESPACE

op_operator <- LT_INC { $$->parser_op_type = MSE_SET_GENERATOR_OP_LT_INC; }
            / LT { $$->parser_op_type = MSE_SET_GENERATOR_OP_LT; }
            / GT { $$->parser_op_type = MSE_SET_GENERATOR_OP_GT; }
            / GT_INC { $$->parser_op_type = MSE_SET_GENERATOR_OP_GT_INC; }
            / INCLUDES { $$->parser_op_type = MSE_SET_GENERATOR_OP_INCLUDES; }
            / EQUALS { $$->parser_op_type = MSE_SET_GENERATOR_OP_EQUALS; }

word <- str:RAW_WORD { COPY_TO_TMP_BUFFER($$, str) }

string <- str:RAW_STRING { COPY_TO_TMP_BUFFER($$, str) }

regex_string <- str:REGEX_STRING { COPY_TO_TMP_BUFFER($$, str) }

op_name <- word {
           PARSE_ASSERT($$, mse_gen_type($$->tmp_buffer, &$$->parser_gen_type));
       }

op_argument <- string { COPY_TO_ARG_BUFFER($$) }
           / regex_string { COPY_TO_ARG_BUFFER($$) }
           / word { COPY_TO_ARG_BUFFER($$) }

sg_dummy <- STMT_NEGATE op_name op_operator op_argument {
            PARSE_ASSERT($$, mse_handle_set_generator(1, $$)); 
        }
        / op_name op_operator op_argument {
            PARSE_ASSERT($$, mse_handle_set_generator(0, $$)); 
        }
        / word {
            COPY_TO_ARG_BUFFER($$)
            $$->parser_gen_type = MSE_SET_GENERATOR_NAME;
            $$->parser_op_type = MSE_SET_GENERATOR_OP_EQUALS;
            PARSE_ASSERT($$, mse_handle_set_generator(0, $$));
        }
        / string {
            COPY_TO_ARG_BUFFER($$)
            $$->parser_gen_type = MSE_SET_GENERATOR_NAME;
            $$->parser_op_type = MSE_SET_GENERATOR_OP_EQUALS;
            PARSE_ASSERT($$, mse_handle_set_generator(0, $$));
        }

set_generator <- sg_dummy {
                   PARSE_ASSERT($$, __mse_insert_node($$, $$->set_generator_node));
                   $$->set_generator_node = NULL;
              }
              / {
                  PARSE_ASSERT($$, __mse_parser_status_push($$));
              } OPEN_BRACKET query CLOSE_BRACKET { 
                  PARSE_ASSERT($$, __mse_parser_status_pop($$));
              }
              / STMT_NEGATE {
                  PARSE_ASSERT($$, __mse_parser_status_push($$));
                  PARSE_ASSERT($$, __mse_negate($$));
              } OPEN_BRACKET query CLOSE_BRACKET {
                  PARSE_ASSERT($$, __mse_parser_status_pop($$));
              }

operator <- AND {
             PARSE_ASSERT($$, $$->op_node = mse_init_interp_node_operation(MSE_SET_INTERSECTION));
         }
         / OR {
             PARSE_ASSERT($$, $$->op_node = mse_init_interp_node_operation(MSE_SET_UNION));
         }

query <- set_generator     
     / query WHITESPACE operator WHITESPACE {
         PARSE_ASSERT($$, __mse_insert_node($$, $$->op_node));
         $$->op_node = NULL;
     } set_generator
     / query WHITESPACE {
         PARSE_ASSERT($$, $$->op_node = mse_init_interp_node_operation(MSE_SET_INTERSECTION));
         PARSE_ASSERT($$, __mse_insert_node($$, $$->op_node));
         $$->op_node = NULL;
     } set_generator

AND <- "and"
OR <- "or"

WHITESPACE <- [ \t]+

LT <- "<"
LT_INC <- "<="
GT <- ">"
GT_INC <- ">="
INCLUDES <- ":"
EQUALS <- "="
OPEN_BRACKET <- "("
CLOSE_BRACKET <- ")"
STMT_NEGATE <- "-"

RAW_WORD <- [a-zA-Z0-9_-]+

STRING_INNER_GROUP_A <- [^"]
STRING_INNER_GROUP_B <- '\"'
STRING_INNER_GROUP <- STRING_INNER_GROUP_A
                   / STRING_INNER_GROUP_B
RAW_STRING <- '"' < STRING_INNER_GROUP+ > '"'

REGEX_STRING_GROUP_A <- [^/]
REGEX_STRING_GROUP_B <- '/'
REGEX_STRING_GROUP <- REGEX_STRING_GROUP_A 
                   / REGEX_STRING_GROUP_B
REGEX_STRING <- '/' < REGEX_STRING_GROUP+ > '/'

%%
int mse_parse_input_string(const char* input_string, mse_interp_node_t **root)
{
    *root = NULL;

    mse_parser_status_t ret;
    memset(&ret, 0, sizeof(ret));
    ret.input_buffer = input_string;
    ret.input_buffer_len = strlen(input_string);

    mse_context_t *ctx = mse_create(&ret);
    while (mse_parse(ctx, &ret));
    mse_destroy(ctx);

    // Cleanup
    __mse_free_parser_status(&ret);

    *root = ret.root;
    ASSERT(root != NULL);
    ASSERT(ret.error == 0);
    return 1;
}
